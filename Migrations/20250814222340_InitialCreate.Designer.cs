// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MidiotecaApi.Data;

#nullable disable

namespace MidiotecaApi.Migrations
{
    [DbContext(typeof(MidiotecaApiDbContext))]
    [Migration("20250814222340_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MidiotecaApi.Models.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("MidiotecaApi.Models.MediaConsumption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomCoverPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FinishedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MediaItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("PricePaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("ReviewText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MediaItemId");

                    b.HasIndex("UserId");

                    b.ToTable("MediaConsumptions");
                });

            modelBuilder.Entity("MidiotecaApi.Models.MediaItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomCoverPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("ExternalCoverUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsFromExternal")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MediaItems");

                    b.HasDiscriminator().HasValue("MediaItem");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("MidiotecaApi.Models.MediaItemGenre", b =>
                {
                    b.Property<Guid>("MediaItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MediaItemId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("MediaItemGenres");
                });

            modelBuilder.Entity("MidiotecaApi.Models.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MediaConsumptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MediaConsumptionId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("MidiotecaApi.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Book", b =>
                {
                    b.HasBaseType("MidiotecaApi.Models.MediaItem");

                    b.Property<string>("Author")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("Pages")
                        .HasColumnType("int");

                    b.Property<int?>("PublicationYear")
                        .HasColumnType("int");

                    b.Property<string>("Publisher")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasDiscriminator().HasValue("Book");
                });

            modelBuilder.Entity("Movie", b =>
                {
                    b.HasBaseType("MidiotecaApi.Models.MediaItem");

                    b.Property<string>("Director")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("DurationMinutes")
                        .HasColumnType("int");

                    b.Property<int?>("ReleaseYear")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Movie");
                });

            modelBuilder.Entity("MidiotecaApi.Models.MediaConsumption", b =>
                {
                    b.HasOne("MidiotecaApi.Models.MediaItem", "MediaItem")
                        .WithMany("MediaConsumptions")
                        .HasForeignKey("MediaItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MidiotecaApi.Models.User", "User")
                        .WithMany("MediaConsumptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MidiotecaApi.Models.MediaItemGenre", b =>
                {
                    b.HasOne("MidiotecaApi.Models.Genre", "Genre")
                        .WithMany("MediaItemGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MidiotecaApi.Models.MediaItem", "MediaItem")
                        .WithMany("MediaItemGenres")
                        .HasForeignKey("MediaItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("MediaItem");
                });

            modelBuilder.Entity("MidiotecaApi.Models.Review", b =>
                {
                    b.HasOne("MidiotecaApi.Models.MediaConsumption", "MediaConsumption")
                        .WithMany("Reviews")
                        .HasForeignKey("MediaConsumptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MidiotecaApi.Models.User", null)
                        .WithMany("Reviews")
                        .HasForeignKey("UserId");

                    b.Navigation("MediaConsumption");
                });

            modelBuilder.Entity("MidiotecaApi.Models.Genre", b =>
                {
                    b.Navigation("MediaItemGenres");
                });

            modelBuilder.Entity("MidiotecaApi.Models.MediaConsumption", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("MidiotecaApi.Models.MediaItem", b =>
                {
                    b.Navigation("MediaConsumptions");

                    b.Navigation("MediaItemGenres");
                });

            modelBuilder.Entity("MidiotecaApi.Models.User", b =>
                {
                    b.Navigation("MediaConsumptions");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
